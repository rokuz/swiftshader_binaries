diff --git a/CMakeLists.txt b/CMakeLists.txt
index c5cd16d55..36cc044d5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -681,6 +681,10 @@ set_target_properties(llvm PROPERTIES FOLDER "third_party")
 if(${REACTOR_BACKEND} STREQUAL "LLVM-Submodule")
     set(LLVM_INCLUDE_TESTS FALSE)
     set(LLVM_ENABLE_RTTI TRUE)
+    set(LLVM_ENABLE_ZSTD FALSE)
+    if(ARCH MATCHES "^x86.*")
+      set(LLVM_TARGETS_TO_BUILD "X86")
+    endif()
     add_subdirectory(${THIRD_PARTY_DIR}/llvm-project/llvm EXCLUDE_FROM_ALL)
     if(ARCH STREQUAL "aarch64")
         llvm_map_components_to_libnames(llvm_libs orcjit aarch64asmparser aarch64codegen)
diff --git a/src/Reactor/LLVMJIT.cpp b/src/Reactor/LLVMJIT.cpp
index 262c69e8e..6fcb2b4e6 100644
--- a/src/Reactor/LLVMJIT.cpp
+++ b/src/Reactor/LLVMJIT.cpp
@@ -47,7 +47,7 @@ __pragma(warning(push))
 #include "llvm/IR/DiagnosticInfo.h"
 #include "llvm/IR/Verifier.h"
 #include "llvm/Support/CommandLine.h"
-#include "llvm/Support/Host.h"
+#include "llvm/TargetParser/Host.h"
 #include "llvm/Support/TargetSelect.h"
 #include "llvm/Transforms/InstCombine/InstCombine.h"
 #include "llvm/Transforms/Instrumentation/AddressSanitizer.h"
@@ -190,7 +190,7 @@ public:
 private:
 	JITGlobals(llvm::orc::JITTargetMachineBuilder &&jitTargetMachineBuilder, llvm::DataLayout &&dataLayout);
 
-	static llvm::CodeGenOpt::Level toLLVM(int level);
+	static llvm::CodeGenOptLevel toLLVM(int level);
 
 	const llvm::orc::JITTargetMachineBuilder jitTargetMachineBuilder;
 	const llvm::DataLayout dataLayout;
@@ -303,26 +303,26 @@ JITGlobals::JITGlobals(llvm::orc::JITTargetMachineBuilder &&jitTargetMachineBuil
 {
 }
 
-llvm::CodeGenOpt::Level JITGlobals::toLLVM(int level)
+llvm::CodeGenOptLevel JITGlobals::toLLVM(int level)
 {
 	// TODO(b/173257647): MemorySanitizer instrumentation produces IR which takes
 	// a lot longer to process by the machine code optimization passes. Disabling
 	// them has a negligible effect on code quality but compiles much faster.
 	if(__has_feature(memory_sanitizer))
 	{
-		return llvm::CodeGenOpt::None;
+		return llvm::CodeGenOptLevel::None;
 	}
 
 	switch(level)
 	{
-	case 0: return llvm::CodeGenOpt::None;
-	case 1: return llvm::CodeGenOpt::Less;
-	case 2: return llvm::CodeGenOpt::Default;
-	case 3: return llvm::CodeGenOpt::Aggressive;
+	case 0: return llvm::CodeGenOptLevel::None;
+	case 1: return llvm::CodeGenOptLevel::Less;
+	case 2: return llvm::CodeGenOptLevel::Default;
+	case 3: return llvm::CodeGenOptLevel::Aggressive;
 	default: UNREACHABLE("Unknown Optimization Level %d", int(level));
 	}
 
-	return llvm::CodeGenOpt::Default;
+	return llvm::CodeGenOptLevel::Default;
 }
 
 class MemoryMapper final : public llvm::SectionMemoryManager::MemoryMapper
diff --git a/src/Reactor/LLVMReactor.cpp b/src/Reactor/LLVMReactor.cpp
index dda6d9166..f2d5fcb1d 100644
--- a/src/Reactor/LLVMReactor.cpp
+++ b/src/Reactor/LLVMReactor.cpp
@@ -25,6 +25,7 @@
 
 #include "llvm/IR/Intrinsics.h"
 #include "llvm/IR/IntrinsicsX86.h"
+#include "llvm/IR/Module.h"
 #include "llvm/Support/Alignment.h"
 #include "llvm/Support/Error.h"
 #include "llvm/Support/ManagedStatic.h"
@@ -556,22 +557,24 @@ std::shared_ptr<Routine> Nucleus::acquireRoutine(const char *name)
 		}
 #endif  // ENABLE_RR_DEBUG_INFO
 
-		if(false)
+#if 0
 		{
 			std::error_code error;
 			llvm::raw_fd_ostream file(std::string(name) + "-llvm-dump-unopt.txt", error);
 			jit->module->print(file, 0);
 		}
+#endif
 
 		jit->runPasses();
 
-		if(false)
+#if 0
 		{
 			std::error_code error;
 			llvm::raw_fd_ostream file(std::string(name) + "-llvm-dump-opt.txt", error);
 			jit->module->print(file, 0);
 		}
-
+#endif
+    
 		routine = jit->acquireRoutine(name, &jit->function, 1);
 	};
 
@@ -3851,7 +3854,7 @@ void promoteFunctionToCoroutine()
 	auto i1Ty = llvm::Type::getInt1Ty(*jit->context);
 	auto i8Ty = llvm::Type::getInt8Ty(*jit->context);
 	auto i32Ty = llvm::Type::getInt32Ty(*jit->context);
-	auto i8PtrTy = llvm::Type::getInt8PtrTy(*jit->context);
+  auto i8PtrTy = i8Ty->getPointerTo();
 	auto promiseTy = jit->coroutine.yieldType;
 	auto promisePtrTy = promiseTy->getPointerTo();
 
@@ -4016,7 +4019,8 @@ void Nucleus::createCoroutine(Type *YieldType, const std::vector<Type *> &Params
 	// coroutine.
 	auto voidTy = llvm::Type::getVoidTy(*jit->context);
 	auto i1Ty = llvm::Type::getInt1Ty(*jit->context);
-	auto i8PtrTy = llvm::Type::getInt8PtrTy(*jit->context);
+  auto i8Ty = llvm::Type::getInt8Ty(*jit->context);
+  auto i8PtrTy = i8Ty->getPointerTo();
 	auto handleTy = i8PtrTy;
 	auto boolTy = i1Ty;
 	auto promiseTy = T(YieldType);
@@ -4115,22 +4119,24 @@ std::shared_ptr<Routine> Nucleus::acquireCoroutine(const char *name)
 	}
 #endif  // ENABLE_RR_DEBUG_INFO
 
-	if(false)
+#if 0
 	{
 		std::error_code error;
 		llvm::raw_fd_ostream file(std::string(name) + "-llvm-dump-unopt.txt", error);
 		jit->module->print(file, 0);
 	}
+#endif
 
 	jit->runPasses();
 
-	if(false)
+#if 0
 	{
 		std::error_code error;
 		llvm::raw_fd_ostream file(std::string(name) + "-llvm-dump-opt.txt", error);
 		jit->module->print(file, 0);
 	}
-
+#endif
+  
 	llvm::Function *funcs[Nucleus::CoroutineEntryCount];
 	funcs[Nucleus::CoroutineEntryBegin] = jit->function;
 	funcs[Nucleus::CoroutineEntryAwait] = jit->coroutine.await;
